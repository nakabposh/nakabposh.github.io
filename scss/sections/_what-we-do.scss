@use "../abstracts/typography";
@use "../abstracts/colors";
@use "../abstracts/mixins";

.what-we-do__cta {
  &-text {
    padding-block: 4em;
    text-align: center;

    @include mixins.mq(large, up) {
      padding-block: 6em;
    }
  }

  &-title {
    margin-bottom: 1em;

    font-family: typography.$ff-primary-serif;
    font-size: typography.$fs-500;
    font-weight: typography.$fw-900;
    color: colors.$clr-very-dark-desatured-blue;
  }

  &-description {
    margin-bottom: 1em;

    color: colors.$clr-dark-grayish-blue;
  }

  &-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
}

.what-we-do__sectors {
  &-card {
    display: grid;
    grid-template-areas: "a";
    align-items: end;

    > * {
      grid-area: a;
    }

    @include mixins.mq(large, down) {
      min-height: 700px;
    }

    // * Little gradient to help increase text readability
    // position: relative;

    // &::after {
    //   content: "";

    //   position: absolute;
    //   inset: 0;

    //   background-image: linear-gradient(
    //     to bottom,
    //     hsla(0, 0%, 10%, 0.2),
    //     transparent
    //   );
    // }
  }

  &-text {
    padding-block: 4em;

    text-align: center;
    color: colors.$clr-dark-desaturated-cyan;
  }

  &-title {
    margin-bottom: 1em;

    font-family: typography.$ff-primary-serif;
    font-size: typography.$fs-500;
    font-weight: typography.$fw-900;
    color: colors.$clr-very-dark-desatured-blue;
  }

  &-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
}

// * From large viewports, we want to give a bit more padding inline to the texts of
// * various cards. We take advantage of the fact that their texts are contained in a ".main-container",
// * so we just modify .main-container's relative width
:where(.what-we-do__cta, .what-we-do__sectors) .main-container {
  @include mixins.mq(large, up) {
    --main-container-relative-width: 60%;
  }
}

// * Grid stuff

@include mixins.mq(large, up) {
  // * We want the rows to be equal sized in height
  .what-we-do {
    display: grid;
    grid-auto-rows: minmax(0, 1fr);
  }

  .what-we-do__cta,
  .what-we-do__sectors {
    display: grid;
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }

  .what-we-do__cta {
    align-items: center;
  }

  // * Alternate image position between even and odd ctas
  .what-we-do__cta:nth-child(odd) > img {
    order: 1;
  }
}
